{
  "permissions": {
    "allow": [
      "Bash(find \"c:\\Users\\sofia\\sakherli\\packages\\apps\\api\" -maxdepth 1 -type f ( -name \".env*\" -o -name \"*.md\" ))",
      "Bash(pnpm run build)",
      "Bash(pnpm run format:write)",
      "Bash(taskkill //F //IM node.exe)",
      "Bash(tasklist)",
      "Bash(findstr /i \"node\")",
      "Bash(tasklist /FI \"IMAGENAME eq node.exe\")",
      "Bash(powershell \"Get-Process node -ErrorAction SilentlyContinue\")",
      "Bash(taskkill /F /PID 15108)",
      "Bash(powershell \"Stop-Process -Id 15108 -Force\")",
      "Bash(powershell \"Stop-Process -Id 28616 -Force\")",
      "Bash(powershell \"Get-Process | Where-Object {$_ProcessName -eq ''node''} | Select-Object Id, ProcessName, CPU\")",
      "Bash(git commit --no-verify -m \"$(cat <<''EOF''\nfeat: Integrate GraphQL for route management in frontend\n\n- Configure Apollo Client with environment-based GraphQL endpoint\n- Implement GraphQL operations for routes (create, list, search)\n- Add repository pattern with GraphQLRouteRepository\n- Create React hooks (useCreateRoute, useGetAllRoutes, useSearchRoutes)\n- Update RouteCreation component to use GraphQL hooks\n- Add GraphQL code generation setup\n- Include environment configuration files\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git add -A)",
      "Bash(git commit --no-verify -m \"$(cat <<''EOF''\nstyle: Format code with Prettier\n\nApply Prettier formatting to all modified files following project style guidelines.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(cat /c/Users/sofia/sakherli/packages/apps/frontend/app/src/App.tsx)",
      "Bash(cat /c/Users/sofia/sakherli/packages/apps/frontend/app/src/main.tsx)",
      "Bash(cat /c/Users/sofia/sakherli/packages/apps/frontend/app/src/components/Home.tsx)",
      "Bash(npm run build)",
      "Bash(npm test -- RouteInMemory.spec.ts)",
      "Bash(npm test -- --testPathPattern=RouteInMemory)",
      "Bash(npm test -- --testPathPattern=RouteInMemory --testNamePattern=\"superset\")",
      "Bash(npx prettier --write src/routes/adapters/driven/RouteInMemory.ts)",
      "Bash(npx prettier --write src/components/RouteCreationSuccess.tsx src/components/RouteCreation.tsx src/App.tsx)"
    ],
    "deny": [],
    "ask": []
  }
}
