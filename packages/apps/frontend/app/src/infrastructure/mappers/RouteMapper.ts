import { Route } from '../../domain/entities/Route'
import { Location } from '../../domain/valueObjects/Location'
import { DateValue } from '../../domain/valueObjects/DateValue'
import { Price } from '../../domain/valueObjects/Price'
import { Stop } from '../../domain/valueObjects/Stop'
import { RouteStatusValue } from '../../domain/valueObjects/RouteStatus'

/**
 * GraphQL Response Type from API
 */
export interface GraphQLRouteResponse {
  id: string
  departureCountry: string
  departureCity: string
  departureDate: string
  arrivalCountry: string
  arrivalCity: string
  arrivalDate: string
  intermediateStops: {
    id: string
    country: string
    city: string
    date: string
  }[]
  description?: string
  price?: number
  transporterId: string
  status: string
  createdAt: string
  updatedAt: string
}

/**
 * Mapper to convert between domain entities and GraphQL responses
 */
export class RouteMapper {
  /**
   * Map GraphQL response to Domain Entity
   */
  static toDomain(graphqlRoute: GraphQLRouteResponse): Route {
    const departure = Location.create(
      graphqlRoute.departureCountry,
      graphqlRoute.departureCity,
    )

    const arrival = Location.create(
      graphqlRoute.arrivalCountry,
      graphqlRoute.arrivalCity,
    )

    const departureDate = DateValue.create(graphqlRoute.departureDate)
    const arrivalDate = graphqlRoute.arrivalDate
      ? DateValue.create(graphqlRoute.arrivalDate)
      : null

    const intermediateStops = graphqlRoute.intermediateStops.map(
      (stop, index) => {
        const location = Location.create(stop.country, stop.city)
        return Stop.create(location, index)
      },
    )

    const status = RouteStatusValue.create(graphqlRoute.status)
    const price = graphqlRoute.price ? Price.create(graphqlRoute.price) : null

    return Route.reconstitute({
      id: graphqlRoute.id,
      transporterId: graphqlRoute.transporterId,
      departure,
      departureDate,
      arrival,
      arrivalDate,
      intermediateStops,
      status,
      description: graphqlRoute.description || null,
      price,
      createdAt: DateValue.create(graphqlRoute.createdAt),
      updatedAt: DateValue.create(graphqlRoute.updatedAt),
    })
  }

  /**
   * Map Domain Entity to GraphQL mutation variables
   */
  static toGraphQL(route: Route): Partial<GraphQLRouteResponse> {
    return {
      id: route.getId().getValue(),
      departureCountry: route.getDeparture().getCountry(),
      departureCity: route.getDeparture().getCity(),
      departureDate: route.getDepartureDate().toISOString(),
      arrivalCountry: route.getArrival().getCountry(),
      arrivalCity: route.getArrival().getCity(),
      arrivalDate: route.getArrivalDate()?.toISOString() || '',
      intermediateStops: route.getIntermediateStops().map((stop) => ({
        id: '', // Will be generated by backend
        country: stop.getLocation().getCountry(),
        city: stop.getLocation().getCity(),
        date: '', // Optional
      })),
      description: route.getDescription() || undefined,
      price: route.getPrice()?.getValue(),
      transporterId: route.getTransporterId(),
      status: route.getStatus().toString(),
      createdAt: route.getCreatedAt().toISOString(),
      updatedAt: route.getUpdatedAt().toISOString(),
    }
  }
}
